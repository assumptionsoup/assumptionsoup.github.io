<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://rubberguppy.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://rubberguppy.com/" rel="alternate" type="text/html" /><updated>2017-07-22T02:36:47+00:00</updated><id>http://rubberguppy.com/</id><title type="html">Rubber Guppy</title><subtitle>GUPPIES GUPPY GUPPY GUPPIES GUP GUP YUP YUPPER GUPPER GUPPALICIOUS
</subtitle><author><name>Jordan Hueckstaedt</name></author><entry><title type="html">All play and no work makes Jack a dull applicant.</title><link href="http://rubberguppy.com/all-play-and-no-work-makes-jack-a-dull-applicant/" rel="alternate" type="text/html" title="All play and no work makes Jack a dull applicant." /><published>2014-01-31T00:17:40+00:00</published><updated>2014-01-31T00:17:40+00:00</updated><id>http://rubberguppy.com/all-play-and-no-work-makes-jack-a-dull-applicant</id><content type="html" xml:base="http://rubberguppy.com/all-play-and-no-work-makes-jack-a-dull-applicant/">&lt;p&gt;Yes, I have in fact been doing work this past year! Lots of it, actually. A 45 hour standard work week doesn’t leave much time for anything else. Which is why this blog and Guppy Tools have sadly been neglected. Don’t get me wrong, Guppy Tools isn’t broken. I just haven’t been able to give it the love it needs to reflect my current skill level. I hope to change that soon though.&lt;/p&gt;

&lt;p&gt;What’s my current skill level you ask? Well, it just so happens that I recently asked my supervisor at Luma Pictures if I could show off a little of what I’ve been doing. And luckily for both of us, I got the go ahead! May I proudly present: &lt;strong&gt;Close Contact&lt;/strong&gt;, a C++ deformer I made solve to approximate collisions a few months ago.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/85112404&quot; width=&quot;640&quot; height=&quot;299&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;!--break--&gt;

&lt;p&gt;Okay, I lied a little. This isn’t quite an accurate picture of what I do with most of my time at work. I spend the large majority of my time writing python code heavily tied to Luma’s existing architecture. It’s not something I could show off.&lt;/p&gt;

&lt;p&gt;Close Contact has the benefit of being a very visual tool with little tied to Luma’s existing architecture. It’s something I can wow the audience with a bit. And I had an amazing time writing it. I was telling friends for weeks that I &lt;em&gt;finally&lt;/em&gt; had an excuse to use the quadratic formula at work. Yes. You heard me right. I got &lt;em&gt;paid&lt;/em&gt; to use the quadratic formula. While I was learning the quadratic formula in high school I was dead certain I would never use it in any practical setting. Boy was I wrong.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">Yes, I have in fact been doing work this past year! Lots of it, actually. A 45 hour standard work week doesn’t leave much time for anything else. Which is why this blog and Guppy Tools have sadly been neglected. Don’t get me wrong, Guppy Tools isn’t broken. I just haven’t been able to give it the love it needs to reflect my current skill level. I hope to change that soon though. What’s my current skill level you ask? Well, it just so happens that I recently asked my supervisor at Luma Pictures if I could show off a little of what I’ve been doing. And luckily for both of us, I got the go ahead! May I proudly present: Close Contact, a C++ deformer I made solve to approximate collisions a few months ago.</summary></entry><entry><title type="html">I’m sorry about your cat.</title><link href="http://rubberguppy.com/im-sorry-about-your-cat/" rel="alternate" type="text/html" title="I'm sorry about your cat." /><published>2014-01-29T19:24:30+00:00</published><updated>2014-01-29T19:24:30+00:00</updated><id>http://rubberguppy.com/im-sorry-about-your-cat</id><content type="html" xml:base="http://rubberguppy.com/im-sorry-about-your-cat/">&lt;p&gt;You know how embarrassing and awkward it is getting back in touch with someone you haven’t talked to in a &lt;em&gt;really&lt;/em&gt; long time? It usually goes something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So. Umm, hi. &lt;br /&gt;
It’s me. &lt;br /&gt;
Remember me? &lt;br /&gt;
We used to hang out. And then we stopped talking a few years back. &lt;br /&gt;
I don’t remember why. &lt;br /&gt;
You know that one time when you were like “Oh, man, I totally owe you for that.” &lt;br /&gt;
Well, I have this favor that I need to ask… &lt;br /&gt;
&lt;!--break--&gt;
And then you get a reply which goes something like:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We stopped talking because you ran over my cat. &lt;br /&gt;
Twice. &lt;br /&gt;
Please don’t contact me again. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah. We’re having one of those talks. It’s a bit awkward isn’t it?&lt;/p&gt;

&lt;p&gt;It’s been more than a year since my last post. Lots has happened since then. Shortly after my last post I landed a job at Luma Pictures as a Junior Pipeline TD. I’ve since become a full-fledged Pipeline TD and I’ve had loads of fun doing it.&lt;/p&gt;

&lt;p&gt;Check this out. Last year Luma Pictures did the Harlem shake:&lt;/p&gt;

&lt;figure class=&quot;video-container center&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/y0uokF71RFk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;p&gt;I’m all the way in the back wearing a squirrel mask, so you can’t see me. It was amazing to see everyone go crazy on top of their desks. A bit later we had an &lt;a href=&quot;http://lumapictures.com/culture/album/10151753513997183&quot; title=&quot;Luma's Halloween Party&quot;&gt;awesome Halloween party&lt;/a&gt; (apparently anybody who’s anybody was there). Here’s me in another mask!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/2014/01/LumaHalloweenParty.jpg&quot; rel=&quot;lightbox[574]&quot; title=&quot;Luma&amp;#039;s Halloween Party!&quot;&gt;&lt;img src=&quot;/resources/2014/01/LumaHalloweenParty.jpg&quot; alt=&quot;Luma&amp;#039;s Halloween Party!&quot; class=&quot;size-large wp-image-587&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;em&gt;(I’m the one cool one.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oh yeah, I also got some work done in between all this fun. But I’ll leave that for another post. Suffice it to say that I’ve had a blast this past year coding in Python, squashing bugs, kicking ass and working on films like &lt;em&gt;Iron Man 3&lt;/em&gt;, &lt;em&gt;Thor: The Dark World&lt;/em&gt;, and &lt;em&gt;Captain America: The Winter Soldier&lt;/em&gt;.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><category term="Halloween" /><category term="Harlem Shake" /><category term="Luma Pictures" /><category term="work life" /><summary type="html">You know how embarrassing and awkward it is getting back in touch with someone you haven’t talked to in a really long time? It usually goes something like this: So. Umm, hi. It’s me. Remember me? We used to hang out. And then we stopped talking a few years back. I don’t remember why. You know that one time when you were like “Oh, man, I totally owe you for that.” Well, I have this favor that I need to ask…</summary></entry><entry><title type="html">Demo Reel Updated!</title><link href="http://rubberguppy.com/demo-reel-updated/" rel="alternate" type="text/html" title="Demo Reel Updated!" /><published>2012-09-18T17:07:09+00:00</published><updated>2012-09-18T17:07:09+00:00</updated><id>http://rubberguppy.com/demo-reel-updated</id><content type="html" xml:base="http://rubberguppy.com/demo-reel-updated/">&lt;p&gt;I’ve finally updated my demo reel! It has my new smooth stretch algorithm front and center. If you didn’t quite understand some of the concepts of my previous posts, you should definitely look at the video. I think it makes the concept if not the math a lot easier to understand.&lt;/p&gt;

&lt;p&gt;I also wanted to share this short method I made for accessing OpenMaya array attributes. It’s very quick and simple. I’d rather encapsulate things like this into smaller functions since the API has so many non-standard elements. Remembering them all can be a hassle.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSparseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;''' Get the values from an array attribute using the datablock.
	Returns a dictionary with the indexes as keys.

	asType should be the function to convert the value to the proper type,
	e.g. om.MDataHandle.asMatrix()'''&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arrayHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputArrayValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elementCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arrayHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jumpToArrayElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elementIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If it isn’t immediately clear how you would use this, for a matrix array attribute that was created in the initialize method like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nodeInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;matrixAttr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;om&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MFnMatrixAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Inputs&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aParentInverseMatrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrixAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'parentInverseMatrix'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'parentInverseMatrix'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;om&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MFnMatrixAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;matrixAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setWritable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;matrixAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStorable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;matrixAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aParentInverseMatrices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I would call my sparse method in the compute method like so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;inverseMatrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSparseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aParentInverseMatrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;om&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MDataHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I just wrote this a few hours ago, and I can’t tell you how happy it made me. Now I don’t need to think nearly as hard when accessing sparse array attributes from the datablock. Of course, this still doesn’t help for all the other ways you might need to access array attributes. Getting the output value, or using the physical index, or getting it from a plug, or getting it from the &lt;em&gt;other&lt;/em&gt; type of array attributes. Good God, this stuff needs to be simplified! In any case, good luck and god speed if you’re trying to use the Maya API to do anything.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">I’ve finally updated my demo reel! It has my new smooth stretch algorithm front and center. If you didn’t quite understand some of the concepts of my previous posts, you should definitely look at the video. I think it makes the concept if not the math a lot easier to understand.</summary></entry><entry><title type="html">My Magical Mathematical Journey Part 3</title><link href="http://rubberguppy.com/my-magical-mathematical-journey-part-3/" rel="alternate" type="text/html" title="My Magical Mathematical Journey Part 3" /><published>2012-09-13T11:30:13+00:00</published><updated>2012-09-13T11:30:13+00:00</updated><id>http://rubberguppy.com/my-magical-mathematical-journey-part-3</id><content type="html" xml:base="http://rubberguppy.com/my-magical-mathematical-journey-part-3/">&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
  &quot;displayAlign&quot;: &quot;left&quot;,
  &quot;tex2jax&quot;:  {inlineMath: [['$','$'], ['\\(','\\)']], skipTags: [&quot;script&quot;,&quot;noscript&quot;,&quot;style&quot;,&quot;textarea&quot;,&quot;pre&quot;,&quot;code&quot;]},

});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Excellent. Smooth stretch was solved. Another day, another math problem solved. I felt like a crime fighter who just beat this giant math monster back. Or was the math monster really solved? Wait, wait wait. Hold on a minute here! The whole reason of redoing this thing was that smooth stretch 2.0 didn’t work well in an IK/FK switch! If this new formula can’t help me solve that, then it’s no better than the old one. Oh crap!&lt;/p&gt;

&lt;p&gt;So I continued to stare at my math chalkboard.&lt;/p&gt;

&lt;p&gt;Okay. I needed to lay out the basics. Going from IK to FK would be simple. Just grab the current scale of the joints, and apply that to my FK chain. Going from FK to IK is all that I needed to concentrate on. So, what did I need to solve for? The IK Scale variable is what I put into the smooth stretch equation to find my final scale. So presumably all I needed to do was put in the final scale I had from the FK chain and get out the IK Scale.&lt;/p&gt;

&lt;p&gt;Wait. That won’t work. The IK Scale is the current scale of the IK chain. It’s based on the distance to the IK handle, and that’s not going to change in either FK or IK. I needed another variable.&lt;/p&gt;

&lt;p&gt;Luckily, I knew what I wanted that variable to be. The length variable. The variable that the animators would use to change the total length of the arm. After a little trial and error I came up with this equation to add length to the smooth stretch equation:&lt;/p&gt;

&lt;div class=&quot;math&quot;&gt;

  $$Final\_Scale = smooth\_stretch\left(\frac{IK\_Scale}{Length}\right)Length$$

&lt;/div&gt;

&lt;p&gt;This is where I started to really hit the limits of my math knowledge. Length is being multiplied inside the smooth stretch function as well as outside. Even if I did know the inverse of my smooth stretch function, how would I use that to solve for length?&lt;/p&gt;

&lt;p&gt;Well, there was nothing else to do but just try and see if something worked. I busted out wolphram alpha. Then I learned how to use wolphram alpha to solve the inverse of an equation. I solved for &lt;a href=&quot;https://www.desmos.com/calculator/8oz8mkbb0d&quot; title=&quot;Inverse Smooth Stretch Curve&quot;&gt;the inverse of the regular smooth stretch curve&lt;/a&gt;. I still didn’t know how to use it. I tried solving for &lt;a href=&quot;https://www.desmos.com/calculator/w2wws1fypu&quot; title=&quot;Inverse Smooth Stretch&quot;&gt;the inverse of the entire smooth stretch function&lt;/a&gt; including the pythagorean theorem. I still didn’t know how to use it.&lt;/p&gt;

&lt;p&gt;I went back to staring at my math chalkboard.&lt;/p&gt;

&lt;p&gt;I like to think that staring at my math chalkboard makes it sound like I’m some sort of math genius. Unfortunately I’m not. And staring at my math chalkboard usually means putting my head into my hands and letting the feeling of despair sink in. Then it’s a matter of waiting to see which will win. Inspiration or despair.&lt;/p&gt;

&lt;p&gt;I tried adding the &lt;a href=&quot;https://www.desmos.com/calculator/yyptflsx1h&quot; title=&quot;Smooth Stretch Curve with Length&quot;&gt;IK Scale variable to my original smooth stretch curve and graphing it&lt;/a&gt;. Maybe seeing what was going on visually would help. That was much better. I immediately saw that the length variable just projected my unit curve out from the origin. It merely scaled the smooth stretch curve.&lt;/p&gt;

&lt;p&gt;Inspiration struck. The smooth stretch curve could pass through any point in the first quadrant of the graph by changing the length variable. I wanted the smooth stretch curve to pass through the point that was the representation of the “elbow” in our IK chain. A vector starting at the origin with an infinite length pointing at the elbow on the graph will always pass through the unit smooth stretch curve. Therefore the length variable is literally the ratio of the distance to the elbow along that vector divided by the distance to the unit circle along that vector. All I needed to do was solve those two lengths.&lt;/p&gt;

&lt;p&gt;Skipping past some wolphram alpha wizardry and a bit of trial and error I ended up with &lt;a href=&quot;https://www.desmos.com/calculator/fdk9yux17c&quot; title=&quot;Smooth Stretch Solved for Length&quot;&gt;the following graph&lt;/a&gt; which solves smooth stretch for the length variable given the IK Scale variable and an arbitrary point in the first quadrant (a,b). Keep in mind that the graph only works in the falloff section of the smooth stretch equation due to the limitations of the graphing software. However, solving for any point which is not in the falloff section is much easier since the distance to the unit circle will always be 1, so the length variable will just be the distance to the elbow point.&lt;/p&gt;

&lt;p&gt;Into the python code!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;maya.OpenMaya&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;om&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;smooth_stretch_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joint_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_lengthA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Assumes that there are at least 3 ordered joints&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# To solve length:&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Find the length of the vector from the origin to the&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#    joint_positions[1] x, y value (solved on the plane formed by joint_positions). (scalePoint)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Find the length of that vector where it intersects with smooth stretch circle curve at a length of 1. (unit_curve)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# The difference is the length!&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Find preliminary triangle stuff:&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Assume jointPosition is a lists of lists.  Convert to MVectors&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;om&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joint_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Find vectors AB, AC&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unit_vectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unit_vectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Find the angle formed where joint_positions[0] is the vertex (in radians).&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit_vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit_vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Solve triangle (scalePoint)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit_vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_lengthA&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Now start to solve for length&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Find radius&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# The vector to scale point (the elbow) is above the tangentPoint.&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# It is therefore going through a unit circle and would be divided by 1&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Solve the intersection of the scaleVector with the unit_curve&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# That is, the solution to (scaleY / scaleX) * currentScale == falloffCircle&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Hold on to your panty-hoes kids, we're in for some chop.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unit_curveX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
				 &lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
				 &lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unit_curveY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falloff_scale&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit_curveX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unit_curveH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit_curveX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit_curveY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Length is the distance to the scale point divided by the distance to the unit curve&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit_curveH&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s a wrap. The math monster was defeated for real.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">Excellent. Smooth stretch was solved. Another day, another math problem solved. I felt like a crime fighter who just beat this giant math monster back. Or was the math monster really solved? Wait, wait wait. Hold on a minute here! The whole reason of redoing this thing was that smooth stretch 2.0 didn’t work well in an IK/FK switch! If this new formula can’t help me solve that, then it’s no better than the old one. Oh crap!</summary></entry><entry><title type="html">My Magical Mathematical Journey Part 2</title><link href="http://rubberguppy.com/my-magical-mathematical-journey-part-2/" rel="alternate" type="text/html" title="My Magical Mathematical Journey Part 2" /><published>2012-09-12T19:01:37+00:00</published><updated>2012-09-12T19:01:37+00:00</updated><id>http://rubberguppy.com/my-magical-mathematical-journey-part-2</id><content type="html" xml:base="http://rubberguppy.com/my-magical-mathematical-journey-part-2/">&lt;p&gt;As I was trying to say in my last post, two weeks ago I began my mathematical journey into smooth stretch. This time around I knew what I wanted to accomplish. I wanted a way to represent smooth stretch using just math. My Maya API chops had increased since my last attempt, so I could now wrap this math into a nice python/c++ node.&lt;/p&gt;

&lt;p&gt;Now I hear what you’re saying, “But Jordan, that XSI blog you pointed to already has the math in it!” Yes, I know. That blog post shows the math for one way to solve smooth stretch. I just didn’t like that way. Using that equation the IK chain never actually becomes straight because there’s an asymptote at y = 0. When I made my first attempt at smooth stretch I tried using that equation in an expression. In the rigs I tested it on, I remember it was painfully obvious that the arms were never straight. My last iteration of smooth stretch didn’t have this problem, and I didn’t want to solve one part of the problem just to introduce another.&lt;/p&gt;

&lt;p&gt;So, with my stubbornness in tow and a goal in mind I went back to the math drawing board.&lt;/p&gt;

&lt;p&gt;First things first. I needed a way to model what a normal stretchy IK system was doing with just math. In a normal stretchy IK system, you are usually solving the scale of the shoulder and elbow joint as a function of the distance to the IK Handle. This is calculated by the current distance to the IK handle divided by the total distance the IK handle can go. Lets call this number the IK Scale.&lt;/p&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
  &quot;displayAlign&quot;: &quot;left&quot;,
  &quot;tex2jax&quot;:  {inlineMath: [['$','$'], ['\\(','\\)']], skipTags: [&quot;script&quot;,&quot;noscript&quot;,&quot;style&quot;,&quot;textarea&quot;,&quot;pre&quot;,&quot;code&quot;]},

});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;div class=&quot;math&quot;&gt;

$$IK\ Scale = \frac{Current\ Distance}{Total\ Distance}$$

&lt;/div&gt;

&lt;p&gt;When the IK Scale is 1, the chain is fully extended. When the IK Scale is at 0, the chain is completely bent. IK scale is therefore the variable used to solve a normal stretchy IK system. So whatever graph I came up with would have to be a function of this variable. That is to say, IK scale would be the variable x in my equation f(x).&lt;/p&gt;

&lt;p&gt;Scrutinizing a normal IK system, I noticed the obvious. In an IK system consisting of a shoulder, elbow and a wrist, the elbow will always rotate around the shoulder. The elbow draws a circle around the shoulder in the plane defined by the pole-vector. It’s a 2D circle. A quarter-circle to be precise. And if you make this circle a function of our IK scale, then you would have a visual representation of an IK system. A quick google search later for how to graph a quarter circle and I had &lt;a href=&quot;https://www.desmos.com/calculator/lp2lsb90jh&quot; title=&quot;Stretchy IK Graph&quot;&gt;this graph representing an Ik system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was when I had a really great epiphany (even if it’s pretty darn obvious). The scale of the shoulder joint in this graph was literally the distance from the origin to the point on the circle. So to find the scale of the shoulder (and therefore the scale of any other joint in the IK system), all I needed was the Pythagorean theorem! What’s even more cool, is that this wasn’t just true about the circle function I just drew, it was true for &lt;em&gt;any&lt;/em&gt; function. All I needed to make was the graph of an equation of the path I wanted my elbow to take while stretching, and that’s what my IK chain would do. So to write it all out:&lt;/p&gt;

&lt;div class=&quot;math&quot;&gt;

  $$Final\ Joint\ Scale = \sqrt{any\ equation(IK\ Scale)^2 + IK\ Scale^2}$$

&lt;/div&gt;

&lt;p&gt;Wow. So I can use any function I want to describe the motion of the elbow joint. I just need an equation that smoothly eases from y = 1 to y = 0. Well, hey! I know a function that does that. I could just use the gaussian function. At this point I did a little jig, hooked up a guassian function and &lt;a href=&quot;https://www.desmos.com/calculator/y2dfrnmtk1&quot;&gt;looked at the graph&lt;/a&gt;. Well. The elbow did follow the gaussian function. There was only a wee little problem with this. The IK chain was shrinking for most of the graph.&lt;/p&gt;

&lt;p&gt;So, while I can plug any function I want into this equation to find the scale, the function has to always stay above the unit circle on the y-axis or the IK chain will start to shrink.&lt;/p&gt;

&lt;p&gt;Now I started thinking about how I could keep things about that y limit. I tried adding an equation to the x part of the unit circle function. That just made a distorted half circle. Then I thought about attaching bezier curves to the right point on the circle and getting the starting tangent at that point to match the circle. I thought about this for a pretty long time before I decided two things. One, this was very similar to my last technique of solving smooth stretch, which I decided was too complex. And two, I only had a vague idea of how to do this, so it was going to take too long to figure out.&lt;/p&gt;

&lt;p&gt;I went back to staring at my math chalkboard.&lt;/p&gt;

&lt;p&gt;I had another epiphany. I had one unit circle. If you draw a second circle that touches the first at a single point, that point will have the same slope on both circles. I already had the equation for a circle. I just needed to constrain it so that it touched the first. Then I could constrain it so that its bottom edge would touch y=0. That would give me a nice smooth falloff. What’s more, if I changed the radius of the second circle, I could control exactly how long the IK chain would be when it became straight. This was an important point. Though I haven’t mentioned it before, this was very high on my list of priorities when I was considering how to approach this problem. The final equation needed to provide flexible and intuitive control for animators. Any solution that couldn’t achieve both would not be a real solution.&lt;/p&gt;

&lt;p&gt;Easy to say, but it wasn’t necessarily easy to implement. This took me awhile to figure out how to do. In the end, I ended up with a &lt;a href=&quot;https://www.desmos.com/calculator/y758xj2rw6&quot; title=&quot;Smooth Stretch by Distance&quot;&gt;graph that used two functions to draw a single smooth curve&lt;/a&gt; which never falls below the unit circle on the y-axis.&lt;/p&gt;

&lt;p&gt;The math for that graph is as follows.&lt;/p&gt;
&lt;div class=&quot;math&quot;&gt;

$$Radius = 0.5(Falloff\_Length^2 - 1) \\
Unit\_Circle = \sqrt{1-IK\_Scale^2} \\
Falloff\_Circle = Radius-Radius\sqrt{1-\left(\frac{Falloff\_Length-IK\_Scale}{Radius}\right)^2} \\
Tangent\_Point = \frac{Falloff\_Length}{\sqrt{Radius^2+Falloff\_Length^2}}$$

&lt;div class=&quot;math&quot;&gt;

  * **Falloff_Length** is the point where the falloff reaches y = 0 (the y intercept). That is, the scale of the arm when it becomes completely straight.
  * **Radius** is the radius of the second circle (the Falloff circle). It is a function of Falloff_Length.
  * **Tangent_Point** is the point at which the two circles meet. When IK\_Scale is less than or equal to this, the unit circle equation is used. When IK\_Scale is greater, the second falloff circle equation is used.

All that was left was to plug the result of that equation into the pythagorean theorem to find the stretch scale.

Math functions usually hurt my brain. So if you're like me, here's the python code of what's going on above. This is the python code I'm currently using inside my final smooth stretch node. Note that this python code has some minor optimizations &amp;#8211; primarily it skips calculating the unit circle function since any pythagorean operation on the unit circle will always result in 1.

```python
from math import sqrt
def smooth_stretch(ik_scale, falloff_scale = 1.73):
	if falloff_scale &amp;gt; 1:
		# Find radius
		radius = 0.5 * (falloff_scale ** 2 - 1.0)

		# Meeting point
		tangent_point = falloff_scale / sqrt(radius ** 2 + falloff_scale ** 2)

		if ik_scale &amp;lt;= tangent_point:
			# Optimization to skip unit circle calculation
			return 1.0

		# Falloff circle.
		# Limit between meeting point and y-intercept(y == 0)
		# Circle bounds may technically be larger.
		if tangent_point &amp;lt; ik_scale and ik_scale &amp;lt;= falloff_scale:
			falloff_circle = radius - radius * sqrt(1 - ((falloff_scale - ik_scale) / radius) ** 2)
		else:
			falloff_circle = 0.0

		# Pythagorean to the rescue!
		final_scale = sqrt(falloff_circle ** 2 + ik_scale ** 2)
	else:
		final_scale = max(1.0, ik_scale)

	return final_scale
```
&lt;/div&gt;&lt;/div&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">As I was trying to say in my last post, two weeks ago I began my mathematical journey into smooth stretch. This time around I knew what I wanted to accomplish. I wanted a way to represent smooth stretch using just math. My Maya API chops had increased since my last attempt, so I could now wrap this math into a nice python/c++ node.</summary></entry><entry><title type="html">My Magical Mathematical Journey Part 1</title><link href="http://rubberguppy.com/my-magical-mathematical-journey-part-1/" rel="alternate" type="text/html" title="My Magical Mathematical Journey Part 1" /><published>2012-09-11T14:57:08+00:00</published><updated>2012-09-11T14:57:08+00:00</updated><id>http://rubberguppy.com/my-magical-mathematical-journey-part-1</id><content type="html" xml:base="http://rubberguppy.com/my-magical-mathematical-journey-part-1/">&lt;p&gt;My mathematical journey into the world of smooth stretch began two weeks ago. Or rather, it started a long time ago when I first learned about smooth stretch from Michael Hutchinson’s cool &lt;a href=&quot;http://michael-hutchinson.com/downloads/index.php&quot;&gt;Elastik&lt;/a&gt; plugin. At that time I tried to replicate it using just sweat, blood, &lt;a href=&quot;http://www.softimageblog.com/archives/108&quot;&gt;an XSI Blog post on the matter for some math insight&lt;/a&gt; and native Maya nodes.&lt;/p&gt;

&lt;p&gt;Smooth stretch is actually on my latest (and now outdated) demo reel. That version was my second attempt at smooth stretch. Version 2.0. This was my third attempt. Version 3.0. There’s something magical about the third attempt of any problem. By then you know the real issues. You know what to concentrate on and the pitfalls to avoid. You have the time to concentrate on what’s really important. In short, the third attempt is where shit gets done.
&lt;!--break--&gt;
But what is smooth stretch, and what does it solve? Smooth stretch is a way to solve the popping that occurs on an IK chain when it reaches its maximum length (aka, an IK pop). Smooth stretch solves this by changing the length of the IK chain as it nears full extension.&lt;/p&gt;

&lt;p&gt;In a stretchy IK system, smooth stretch eases the transition from rotational movement to linear movement. In a stretchy IK system a set of joints will rotate until they reach their maximum extension. Then they will then instantly begin to scale towards the IK handle (linear translation). Smooth stretch eases the transition between these two types of movement by starting to scale the joints (move them linearly) while they are still rotating.&lt;/p&gt;

&lt;p&gt;The concept is relatively simple. The real question is, how do you know when to start easing this transition and by how much? In my first and second iterations of smooth stretch I focused on interpolating between two functions over a given time. The two functions were simply the rotation movement and linear movement of the joints. The interpolation was an animation curve I made in Maya. This had two major problems with it. The first problem was mostly an aesthetical one. The animation curve I drew in Maya was not something I could represent easily with math. It was messy. It was also not mathematically derived. I could judge how much I liked the curve by eyeballing the results, but with rigging I’ve grown to distrust doing things like that when dealing with math. The second problem was a mathematical one. If I represented the interpolation these two functions by using a Maya animation curve and that curve is embedded in an equation, how do I solve this for an IK/FK switch?&lt;/p&gt;

&lt;p&gt;Things got messy from there. This was not a good solution in my opinion. While it could have been possible to solve my IK/FK switch by representing the hermite curve that the Maya animation curve represented, solving it as a non-parametric function and use that to solve my original equation… It was far beyond anything I could do at the time (and still probably is). Obviously, if you’ve seen my demo reel, you know I must have done something because I show an IK/FK switch with smooth stretch in there. I “solved” it by treating the entire equation as a black box. I iteratively solved the equation by guessing at the answer using a modified binary search. It would plug a guess into Maya, see if the result was close to what it should be, increase or decrease the value depending on what it got back, and eventually find the answer to the specified accuracy.&lt;/p&gt;

&lt;p&gt;The solution was definitely a hack in my mind. And not the good kind of hack. The kind of hack you make when desperation sets in and nothing else works. Or deadlines start looming.&lt;/p&gt;

&lt;p&gt;This post is looking like it will be epic in length, so I’m going to split it up into a few posts. See you next time as we delve further into my smooth stretch journey.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">My mathematical journey into the world of smooth stretch began two weeks ago. Or rather, it started a long time ago when I first learned about smooth stretch from Michael Hutchinson’s cool Elastik plugin. At that time I tried to replicate it using just sweat, blood, an XSI Blog post on the matter for some math insight and native Maya nodes. Smooth stretch is actually on my latest (and now outdated) demo reel. That version was my second attempt at smooth stretch. Version 2.0. This was my third attempt. Version 3.0. There’s something magical about the third attempt of any problem. By then you know the real issues. You know what to concentrate on and the pitfalls to avoid. You have the time to concentrate on what’s really important. In short, the third attempt is where shit gets done.</summary></entry><entry><title type="html">Guppy Animation Tools Released!</title><link href="http://rubberguppy.com/guppy-animation-tools-released/" rel="alternate" type="text/html" title="Guppy Animation Tools Released!" /><published>2012-08-29T15:16:18+00:00</published><updated>2012-08-29T15:16:18+00:00</updated><id>http://rubberguppy.com/guppy-animation-tools-released</id><content type="html" xml:base="http://rubberguppy.com/guppy-animation-tools-released/">&lt;p&gt;The particularly astute imaginary visitor will notice that I’ve uploaded &lt;a href=&quot;https://github.com/assumptionsoup/Guppy-Animation-Tools&quot;&gt;Guppy Animation Tools&lt;/a&gt; to Github. This is the first repository I’ve put on Github related to Maya. It is a collection of animation scripts and plugins I’ve written in the past eight months or so.&lt;/p&gt;

&lt;p&gt;In keeping with my original goal of getting my work to the masses, this collection includes both finished and unfinished works. Clever Keys, one of my most polished scripts, is in this repository. It is a much more recent version of Clever Keys than is on my website or creative crash, with several new bug fixes. Guppy Animation Tools also includes my newest and most untested animation script, Lock ‘n Hide. Lock ‘n Hide lets animators lock and or hide attributes on referenced nodes. Those are two of the six tools in this repository, so if you’re an animator in search of some fun tools go check it out! If you find a bug please report it!&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">The particularly astute imaginary visitor will notice that I’ve uploaded Guppy Animation Tools to Github. This is the first repository I’ve put on Github related to Maya. It is a collection of animation scripts and plugins I’ve written in the past eight months or so. In keeping with my original goal of getting my work to the masses, this collection includes both finished and unfinished works. Clever Keys, one of my most polished scripts, is in this repository. It is a much more recent version of Clever Keys than is on my website or creative crash, with several new bug fixes. Guppy Animation Tools also includes my newest and most untested animation script, Lock ‘n Hide. Lock ‘n Hide lets animators lock and or hide attributes on referenced nodes. Those are two of the six tools in this repository, so if you’re an animator in search of some fun tools go check it out! If you find a bug please report it!</summary></entry><entry><title type="html">Such a busy little bee.</title><link href="http://rubberguppy.com/such-a-busy-little-bee/" rel="alternate" type="text/html" title="Such a busy little bee." /><published>2012-08-24T17:34:55+00:00</published><updated>2012-08-24T17:34:55+00:00</updated><id>http://rubberguppy.com/such-a-busy-little-bee</id><content type="html" xml:base="http://rubberguppy.com/such-a-busy-little-bee/">&lt;p&gt;Welcome back, my imaginary visitor. I like to imagine that people actually visit my site. It’s probably all my imagination. I also like to imagine that there’s a single person in Bangladesh that obsessively visits my site to fill the void in his life, and the OCD in his head.&lt;/p&gt;

&lt;p&gt;Well, my imaginary visitor, if you take a look to your right, you will see I’ve been busy. If the javascript gods have blessed me with good fortune, you should see a list of the projects I’ve just put up on Github. For a long time I’ve been frustrated with the amount of work I put up on the web. I want more of my work to be out there. Unfortunately, it takes quite a bit of time to polish a script until I feel it’s ready for the masses. Then it takes even more time to prepare documentation, presentation, a write-up, and post all of that to my website and creativecrash. Not to mention the little things I need to tweak for both those places. Also, while I appreciate that there is a site like creative crash to help aggregate scripts for users, I’m pretty disappointed with the implementation of the site and the attitudes of the people running it.&lt;/p&gt;

&lt;p&gt;Enter Github. A place I can put my scripts, and easily update them. It encourages others to fork and improve my scripts, while also providing a bug tracker. Having my scripts on Github also means I’ll have a hassle free backup of them should anything happen to my computer (though Github warns users that it is &lt;em&gt;not&lt;/em&gt; a backup service). Using Github also means using git, so my scripts will finally be version controlled! I’ve actually been using git itself on my scripts for about six months, but I haven’t really been using it seriously.&lt;/p&gt;

&lt;p&gt;So there are many reasons why I’m going to use Github. The primary reason is to get my work off my computer, and into the hands of other users. To help with this goal, all of my Github repositories will be live repositories. Any change I make on my computer, I plan to immediately push to Github. I don’t want to sit on my code in fear of bugs and have my Github page turn into a barren wasteland. This means that anyone who uses my Github scripts will have all the newest features, the newest bugfixes, and the newest bugs that I’ve commited. If this leads to a problem with users, I may split off my work into two branches, a Live branch and a Master branch, with the expectation that the Master branch will be more stable. But for now I’m going to only use a Master branch to keep things simple.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">Welcome back, my imaginary visitor. I like to imagine that people actually visit my site. It’s probably all my imagination. I also like to imagine that there’s a single person in Bangladesh that obsessively visits my site to fill the void in his life, and the OCD in his head.</summary></entry><entry><title type="html">My favorite typo.</title><link href="http://rubberguppy.com/my-favorite-typo/" rel="alternate" type="text/html" title="My favorite typo." /><published>2012-08-07T13:36:56+00:00</published><updated>2012-08-07T13:36:56+00:00</updated><id>http://rubberguppy.com/my-favorite-typo</id><content type="html" xml:base="http://rubberguppy.com/my-favorite-typo/">&lt;p&gt;My favorite typo when I’m writing python code is “enumerage.” I make this mistake about 25% of the time I try to type “enumerate” for some reason. And every time I have to giggle a little. Something about the idea of Number Rage tickles the little kid in me (or perhaps more etymologically correct, Counting Rage). I imagine a person getting angrier and angrier from the mere sight of numbers. Numbers anywhere. They can’t stand the numbers. Especially when the numbers are in order.&lt;/p&gt;

&lt;p&gt;Do you have a favorite typo?&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">My favorite typo when I’m writing python code is “enumerage.” I make this mistake about 25% of the time I try to type “enumerate” for some reason. And every time I have to giggle a little. Something about the idea of Number Rage tickles the little kid in me (or perhaps more etymologically correct, Counting Rage). I imagine a person getting angrier and angrier from the mere sight of numbers. Numbers anywhere. They can’t stand the numbers. Especially when the numbers are in order. Do you have a favorite typo?</summary></entry><entry><title type="html">Fun Trick #1</title><link href="http://rubberguppy.com/fun-trick-1/" rel="alternate" type="text/html" title="Fun Trick #1" /><published>2012-07-29T17:29:51+00:00</published><updated>2012-07-29T17:29:51+00:00</updated><id>http://rubberguppy.com/fun-trick-1</id><content type="html" xml:base="http://rubberguppy.com/fun-trick-1/">&lt;p&gt;Here’s a fun trick in Maya. This creates a locator with no name:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;maya.cmds&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It seems like I always manage to accidentally do this in every 3D package I try.&lt;/p&gt;</content><author><name>Jordan Hueckstaedt</name></author><summary type="html">Here’s a fun trick in Maya. This creates a locator with no name: import maya.cmds as cmd cmd.spaceLocator(n = '1') It seems like I always manage to accidentally do this in every 3D package I try.</summary></entry></feed>